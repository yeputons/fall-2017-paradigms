Основы SQL
==========

Что такое база данных
---------------------
Задача: пишем приложение для учёта товарооборота в магазине: какие есть товары, в каких количествах, по каким ценам и когда закупались, какие продажи были. Вопрос: как хранить данные?
* Создать один или несколько файликов локально на диске и в них писать, когда что-то меняется. Это несложно пишется, но надо аккуратно думать над форматом, чтобы не переписывать файл каждый раз с нуля.
* Пусть теперь есть две кассы на разных компах, они должны иметь доступ к файликам одновременно. Можно расшарить по сети, но надо их как-то синхронизировать, чтобы не было race condition. Можно открыть файл в эксклюзивном режиме. А если у нас несколько файликов - то надо брать блокировку на несколько файлов (потому что одновременно записать и изменение в товарах, и чек). Это сложно.
* Можно не шарить файлики по сети, а написать программу-сервер, которая обрабатывает запросы "сделать то-то с нашими данными", приходящие по сети. Она живёт на одном компьютере и инкапсулирует то, как данные хранятся. Но это всё ещё не полноценная БД.
* Если мы захотели изменить формат данных или что мы храним, то надо много чего переписывать и перезапускать - это неприятно. Поэтому делаем сервер независимым от данных, которые он хранит - пусть у него есть какая-то "схема" данных, а он может делать с ними что угодно. Получили Систему Управления Базами Данных (СУБД). База данных - это просто куча данных, которые лежат вместе и над которыми можно делать какие-то операции.

Типы СУБД
---------
Бывают реляционные (SQL) и остальные (no-SQL). Реляционные - классика, их и будем изучать.
Примеры реляционных СУБД: MySQL, MariaDB, Oracle, MS SQL. С ними обычно общаются на декларативном языке SQL, который описывает действия с БД.
Нереляционных: MongoDB, Redis, Memcached. У них обычно свои протоколы и наборы команд.

Реляционные СУБД
-----------------
Хранят данные в независимых БД, каждая БД - набор таблиц.
Таблица - это фиксированный набор типизированных колонок с названиями плюс строчки с данными (без определённого порядка).
В математической модели таблица называется "отношение" (relation), отсюда "реляционные".
Есть реляционная алгебра, где определяют операции с таблицами, но мы туда не пойдём.

Пример таблицы, показать её описание (написанное на языке SQL, обычно в виде запроса "создать таблицу", читается как так-себе-английский).
Типы данных: INT, CHAR(xx), VARCHAR(xx), TEXT, SERIAL, ещё какие-то? TODO
Показать запросы:
* `SELECT * FROM table`, `SELECT <имя-колонки> FROM ...`
* `SELECT ... WHERE`, добавление сравнений, логических операций, `LIKE` для строчек.
* `SELECT a, b, a + b AS sum` - названия новым столбцам (проще читать результаты и проще писать сложные запросы).
* `SELECT COUNT(*)` (* - все колонки, хватит одной любой), `COUNT(DISTINCT a, b)` и функции `MAX`, `AVG`, `MIN`. Не мешать в одном запросе агрегаты и неагрегаты, а то хрень будет. В sqlite просто одну строчку выведет, кто-то может ошибку сказать.
* `LIMIT`, `OFFSET`. Подставы с ними:
  * Почему не очень хорошо использовать это без `ORDER BY`? Потому что порядок неопределён. Из-за этого вообще надо очень осторожно - по умолчанию строки идут в произвольном порядке.
  * Почему не очень хорошо грузить ленту новостей методом "подгрузи десять начиная с пятого"? Потому что появляются новые записи, а старые удаляются, номера быстро неактуальны.
  Мораль: не стоит надеяться на номера строк, даже если они "чётко определены".
  А в случае с лентой верное решение - получи все, которые по дате больше записи с нужным id.
* `DELETE FROM WHERE`. Если без `WHERE` - удалит всё.
* `INSERT INTO` без имён колонок, с именами колонок (спросить, зачем надо - чтобы можно было схему менять и колонки переставлять/добавлять).

У SQL есть огромное число диалектов, не смотря на наличие стандартов (у каждой СУБД свой), но вот эти основные команды везде, скорее всего, выглядят одинаково и одинаково работать.


Где используются СУБД
---------------------
Везде, где есть хоть малейший шанс, что нам надо будет хранить хоть немного нетривиальные данные или менять схему. Или искать по нетривиальным данным.
* Если данных/клиентов будет много - то мы получаем масштабируемое решение из коробки, не изобретаем велосипед. Обычно СУБД обслуживают несколько приложений, каждое имеет отдельную БД (или несколько), можно создавать разных пользователей с разными правами...
* Если мы просто пишем маленькое приложение - то мы получаем всю мощь сложных запросов (которые читаются лучше циклов for и list comprehension) и привычный для всех интерфейс. Очень явно отделяются данные и их обработка от того, что мы хотим сделать.
* Если мы data scientist и хотим активно играть с данными. Или просто у нас есть набор данных, на котором мы хотим быстро посчитать статистику - тогда удобно иметь его в БД, а не писать скрипт (даже на Python!). И не набагаем в крайних случаях (на самом деле нет - про NULL'ы позже).
* Но тогда мы надеемся на оптимизатор и ум БД (то есть если вам нужно гарантировать логарифм на запрос - не подходит), чуть-чуть жертвуем производительностью и лёгкостью настройки (если нам требуется внешний сервер), но это обычно оправдано.

Есть встраиваемые СУБД, самая популярная - sqlite. Её можно вкомпилировать в приложение, она хранит ровно одну БД, вся БД живёт в одном файлике. Формат совместим между разными приложениями, поэтому можно даже отлаживать своё приложение, открыв его БД в стороннем просмотрщике.

Что будет в домашнем задании
----------------------------
У вас будет БД в формате sqlite, вам нужно будет написать SQL-запросы, которые что-то вычисляют.
Как можно играть с sqlite и языком sql (на примере учебной базы):
* Просто запустить `sqlite3`, он создаст временную БД в памяти (убьётся при смерти sqlite3).
* Набрать там `.open file.sqlite` или запустить `sqlite3 file.sqlite`, БД будет сохранена в файл.
* Потом набирать SQL-запросы, разделять их ;
* Использовать GUI (тоже разделяется ;)
* Использовать модуль sqlite3 для Python, там есть Connection, execute (только по одной команде, без ;). Показать код, объект "соединение" внутри менеджера контекста (такой обычно во всех языках есть), итерацию по результату запроса (такой объект зовётся "курсор", тоже везде есть; на самом деле курсор обычно ещё и запросы умеет выполнять).

Упражнение
----------
Открываем тестовые данные в sqlite, пробуем посчитать что-нибудь в разных таблицах (несколько простых упражнений).
Пробуем добавить свои данные, удалить старые, запросы изменяются.
Пробуем написать скрипт на Python для генерации базы данных. Смотрим, что получилось.

Ключи
-----
На самом деле оказывается, что иметь "первичный ключ" у любой строчки вообще очень удобно. Например, БД может для него построить индекс для быстрого поиска элемента по ключу. Так что очень редко встречается таблица без столбца с именем id. Надо только смотреть, чтобы он был уникальный (можно задать PRIMARY KEY в структуре таблицы, тогда БД будет следить).

NULL
----
Показать NULL ("ничего").
Некоторые колонки NULL бывают, некоторые не бывают (помечены NOT NULL).
Показать, что его могут вернуть агрегаты.
Показать, что с ним происходит в таблицах.

SQL-инъекции
------------
Классика: `SELECT * FROM users WHERE username='{}' AND password='{}'`.
Подставили пароль равный ' OR ''=', получили упс.
Надо аккуратно экранировать, этим обычно занимается библиотека языка программирования, никогда не составляйте SQL-запросы руками из пользовательских данных. Подстановка должна идти на уровне библиотеки, а не ваших строк.

Группировка и агрегация
=======================

Среднее количество чего-нибудь где-нибудь можно посчитать при помощи WHERE + AVG.
Но если мы хотим взять все данные, и посчитать среднее число жителей в регионах, если у нас есть данные по городам?
Можно выписать запрос на регион, но можно одним запросом при помощи GROUP BY. Тогда в SELECT можно указывать либо агрегаты, либо поля из GROUP BY - тогда есть смысл. Если сделали по-другому - поведение зависит от БД.
Обратите внимание, что сначала WHERE, а потом GROUP BY. Если хотим отфильтровать после GROUP BY - нам поможет HAVING (опять же, аккуратно в sqlite с тем, какие поля туда пихаете, он не проверит).

Дать два упражнения.

Подзапросы и соединения
=======================

Основное
--------
Задача: найти население страны, в которой расположен город. Делаем подзапрос в условии WHERE.
Задача: хотим найти средний уровень самой грамотной страны по годам. Сначала ищем уровень самой грамотной страны, а потом - SELECT AVG FROM (subquery).

Более практичный пример: хотим вывести информацию по странам плюс население самого большого города (это две таблицы). Показать сначала с подзапросом, а потом с JOIN ON (в реляционной алгебре есть почти такая операция соединения, но у той семантика чуть попроще).

Рассказать про первичный ключ и название "внешний ключ".

Дать два упражнения.

Грабли с NULL
-------------
Какие грабли: NULL и отсутствие соответствий в таблицах.
На самом деле, они были и с подзапросами.
Например: считаем количество X в Y, если оно ноль - его не будет в результате.
Поэтому есть LEFT JOIN и RIGHT JOIN, FULL JOIN (всегда оставляет строчки левой/правой таблицы, sqlite не умеет right).


Объединение результатов запросов
================================

UNION нужен, если у нас хочется объединить друг за другом результаты запросов.
Например, вывести объекты из разных таблиц, если у них один смысл (если города и страны; выводим топонимы).

Домашнее задание
================
Рассказать, какие есть таблицы и какие есть связи. Выбрать парочку join'ов, попросить студентов предложить задания, показать их.

Как сдавать: сколько-то SQL-файлов, каждый должен выдавать правильный ответ на базе данных (с учётом NULL'ов и прочего). Смотрите внимательно на схему таблиц.

Как форматировать: стандартный отступы, посмотреть на наличие linter'ов.
