2 + 3
4 + 5
6 * 7
2 ^ 3  -- exponentiation
-3 + 5    -- Ok
5 * -3    -- Compilation error because of unary
5 * (-3)  -- Ok
11 / 3    -- Floating point is out-of-box
div 11 3  -- Special function for integer division, mind calling syntax.
mod 11 3  -- Similar for modulo.
div 10 + 1 3   -- Compilation error
div (10 + 1) 3 -- Ok
True && True
True && False
True || False
False || False

2 == 3
2 == "3"
(+) 4 5
(-) 4 5
(*) 4 5
11 `div` 3
11 `mod` 3
(-) 4 5
(flip (-)) 4 5

[1,2,3]        -- Ok
:t [1,2,3]
[1,2,"3"]      -- Compilation error
["1","2","3"]  -- Ok
[1,2,3] == [1,2,1+2]
[1,2,3] == [1,2,1]
[1,2,3] /= [1,2,1]
[1,2,3] == ["1","2","3"]
[1,2,3] ++ [4,5,6]
head [1,2,3]
head []
tail [1,2,3]
tail []
take 2 [1,2,3]
drop 2 [1,2,3]
drop 4 [1,2,3]
take 4 [1,2,3]
take (-1) [1,2,3]
[1, 2, 3] !! 1
1:[2,3]
1:2:[3,]
1:2:3:[] -- Square brackets are syntactic sugar
take 2 "Hello"
:t "Hello" -- No strings, only [Char]
"hello " ++ "world"

(1, "hello")
:t (1, "hello")
zip [1,2,3] [4,5,6]
[2..12]
[2,4..12]
[2,4..11]
[11,10..5]
[11..5]
['A'..'F']
take 5 [10..]
take 1000 [10..]

[x + 1 | x <- [1..10]]
[(x, y) | x <- [1..10], y <- [1..10], x + y == 10]
[(x, y) | x <- [1..10], y <- [1..10], x + y /= 10]
[(x, y, z) | x <- [1..10], y <- [1..10], z <- [1..10], x ^ 2 + y ^ 2 == z ^ 2]
